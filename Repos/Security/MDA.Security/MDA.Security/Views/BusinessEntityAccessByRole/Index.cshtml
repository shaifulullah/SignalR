@{
    ViewBag.Title = string.Format(ResourceStrings.Text_Identification, ResourceStrings.Text_BusinessEntityAccessByRole);
}

<script>
    $(function () {
        $("#gridBusinessEntityAccessByRole").kendoGrid({
            columns: [
                {
                    headerTemplate: "<input id='chBxSelectAll' type='checkbox' />",
                    template: "<input id='chBxSelectRow' class='gridCheckBox' type='checkbox' />",
                    filterable: false, sortable: false, groupable: false, width: 28
                },
                { field: "Id", title: "@ResourceStrings.Display_Name_BusinessEntityAccessByRole_Id", hidden: true },
                { field: "SecurityRolesObj.Code", title: "@ResourceStrings.Display_Name_BusinessEntityAccessByRole_SecurityRolesCode" },
                { field: "SecurityRolesObj.Description", title: "@ResourceStrings.Display_Name_BusinessEntityAccessByRole_SecurityRolesDescription" },
                { field: "SecurityRolesObj.CompanyInApplicationObj.ApplicationObj.Description", title: "@ResourceStrings.Display_Name_BusinessEntityAccessByRole_Application" },
                { field: "SecurityRolesObj.CompanyInApplicationObj.CompanyObj.Description", title: "@ResourceStrings.Display_Name_BusinessEntityAccessByRole_Company" },
                { field: "Value", title: "@ResourceStrings.Display_Name_BusinessEntityAccessByRole_Value" }
            ],
            pageable: { input: false, numeric: true, refresh: true, pageSizes: [15, 20, 30, 40, 50] },
            groupable: true,
            sortable: { allowUnsort: false },
            filterable: true,
            resizable: true,
            dataBound: onDataBound,
            dataSource: {
                serverPaging: true, serverFiltering: true, serverSorting: true, pageSize: '@ApplicationGlobals.GridMinRows',
                page: getPage("gridBusinessEntityAccessByRole"),
                sort: getSort("gridBusinessEntityAccessByRole") == null ? { field: "SecurityRolesObj.Code", dir: "asc" } : getSort("gridBusinessEntityAccessByRole"),
                filter: getFilter("gridBusinessEntityAccessByRole"),
                schema: {
                    data: "Data", total: "Total",
                    model: {
                        id: "Id",
                        fields: {
                            "Id": { type: "number" },
                            "SecurityRolesObj.Code": { type: "string" },
                            "SecurityRolesObj.Description": { type: "string" },
                            "SecurityRolesObj.CompanyInApplicationObj.ApplicationObj.Description": { type: "string" },
                            "SecurityRolesObj.CompanyInApplicationObj.CompanyObj.Description": { type: "string" },
                            "Value": { type: "string" }
                        }
                    }
                },
                transport: {
                    read: {
                        url: "BusinessEntityAccessByRole/BusinessEntityAccessByRolePage",
                        contentType: "application/json; charset=utf-8",
                        type: "POST",
                        dataType: "json"
                    },
                    parameterMap: function (data) {
                        return JSON.stringify(data);
                    }
                }
            }
        });

        $("#gridBusinessEntityAccessByRole").attr("hiddenSelectedRows", "#hidGridCheckedRowsBusinessEntityAccessByRole");
    });
</script>

@using (Html.BeginForm(string.Empty, "BusinessEntityAccessByRole", FormMethod.Post))
{
    <div class="content">
        <div id="error-display" class="error">
            @ViewBag.ErrorMessage
        </div>

        @Html.GenerateBreadCrumbs("SecurityBusinessEntities", ResourceStrings.Text_BusinessEntityAccessByRole)
        @Html.GenerateMasterDetail("SecurityBusinessEntities")

        <div class="padding-bottom-5">
            @Html.Button(ResourceStrings.Text_New, new { @class = "insert-button", @type = "button", @id = "imgBtNew" }, AuthorizeUser.CanPerformAction(PageId.PAGE_BUSINESSENTITYACCESSBYROLE, DataOperation.CREATE))
            @Html.Button(ResourceStrings.Text_Edit_View, new { @class = "edit-button", @type = "button", @id = "imgBtEdit" }, AuthorizeUser.CanPerformAction(PageId.PAGE_BUSINESSENTITYACCESSBYROLE, DataOperation.READ) || AuthorizeUser.CanPerformAction(PageId.PAGE_BUSINESSENTITYACCESSBYROLE, DataOperation.UPDATE))
            @Html.Button(ResourceStrings.Text_Copy, new { @class = "copy-button", @type = "button", @id = "imgBtCopy" }, AuthorizeUser.CanPerformAction(PageId.PAGE_BUSINESSENTITYACCESSBYROLE, DataOperation.CREATE))
            @Html.Button(ResourceStrings.Text_Delete, new { @class = "delete-button", @type = "button", @id = "imgBtDelete" }, AuthorizeUser.CanPerformAction(PageId.PAGE_BUSINESSENTITYACCESSBYROLE, DataOperation.DELETE))
        </div>

        @(Html.Search("BusinessEntityAccessByRoleSearch").Form("BusinessEntityAccessByRoleForm").Grid("gridBusinessEntityAccessByRole"))
        <div id="gridBusinessEntityAccessByRole"></div>
    </div>

    @Html.Hidden("hidGridCheckedRowsBusinessEntityAccessByRole")
}

@if (AuthorizeUser.CanPerformAction(PageId.PAGE_BUSINESSENTITYACCESSBYROLE, DataOperation.CREATE) || AuthorizeUser.CanPerformAction(PageId.PAGE_BUSINESSENTITYACCESSBYROLE, DataOperation.UPDATE))
{
    @(Html.SearchBox("imgBtSecurityRolesCode")
        .MultiSelect(false)
        .Title(ResourceStrings.Text_SecurityRoles)
        .Sort("Code")
        .Controller("BusinessEntityAccessByRole")
        .Action("SecurityRolesPage")
        .BindData("bindSecurityRoles")
        .Columns(string.Format("Id:{0}:number:true:0,Code:{1}:string:false:20,Description:{2}:string:false:30,CompanyInApplicationObj.ApplicationObj.Description:{3}:string:false:23,CompanyInApplicationObj.CompanyObj.Description:{4}:string:false:23",
            ResourceStrings.Display_Name_SecurityRoles_Id, ResourceStrings.Display_Name_SecurityRoles_Code, ResourceStrings.Display_Name_SecurityRoles_Description,
            ResourceStrings.Display_Name_BusinessEntityAccessByRole_Application, ResourceStrings.Display_Name_BusinessEntityAccessByRole_Company)))
}

<script>
    function bindSecurityRoles(returnValues) {
        if (returnValues !== "") {
            $.ajax({
                url: "BusinessEntityAccessByRole/GetSecurityRolesData",
                data: { id: returnValues },
                traditional: true,
                type: "POST",
                async: false,
                success: function (data) {
                    $("#window #error-display, #error-display").html("");

                    $("#txBxSecurityRolesCode").val(data.SecurityRolesCode);
                    $("#txBxSecurityRolesDescription").val(data.SecurityRolesDescription);
                    $("#txBxApplication").val(data.Application);
                    $("#txBxCompany").val(data.Company);

                    $("#hidLnSecurityRolesId").val(returnValues);

                    $("#txBxValue").valid();
                }
            });
        }
    }
</script>

<div id="window"></div>
@Scripts.Render("~/bundles/popup", "~/bundles/grid")